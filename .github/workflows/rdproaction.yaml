name: 构建 RustDesk-Pro

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * 1'  # 每周一 UTC 0 点运行（北京时间 周一早上8点）

jobs:
  modify-and-build:
    runs-on: ubuntu-latest

    env:
      LOCAL_TAG_FILE: temp/tag.md

    steps:
      - name: Checkout 当前仓库
        uses: actions/checkout@v4
        
      - name: 🔍 检查是否需要运行构建任务
        id: check-version
        run: |
          mkdir -p temp
          touch $LOCAL_TAG_FILE
          local_tag=$(cat $LOCAL_TAG_FILE || echo 'none')
          echo "🔖 本地版本: $local_tag"
          echo "local_tag=$local_tag" >> $GITHUB_ENV
          latest_tag=$(curl -s https://api.github.com/repos/rustdesk/rustdesk/releases/latest | jq -r .tag_name)
          echo "🌐 远程版本: $latest_tag"
          echo "remote_tag=$latest_tag" >> $GITHUB_ENV

          if [ "$latest_tag" == "$local_tag" ]; then
            echo "✅ 版本一致，无需构建"
            echo "skip_build=true" >> $GITHUB_OUTPUT
          else
            echo "⚠️ 版本不一致，执行构建"
            echo "skip_build=false" >> $GITHUB_OUTPUT
          fi

      - name: 📦 设置 Git 用户信息
        if: steps.check-version.outputs.skip_build == 'false'
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"

      - name: 📁 克隆 rustdesk 仓库及子模块
        if: steps.check-version.outputs.skip_build == 'false'
        run: |
          git clone --recurse-submodules https://github.com/rustdesk/rustdesk.git

      - name: 🧹 移除子模块引用并删除文件
        if: steps.check-version.outputs.skip_build == 'false'
        run: |
          cd rustdesk
          SUBMODULE_PATH=$(git config -f .gitmodules --get submodule.libs/hbb_common.path)
          git submodule deinit -f $SUBMODULE_PATH
          git rm --cached $SUBMODULE_PATH
          rm -rf $SUBMODULE_PATH

      - name: 🔄 重新克隆子模块
        if: steps.check-version.outputs.skip_build == 'false'
        run: |
          cd rustdesk
          SUBMODULE_URL=$(git config -f .gitmodules --get submodule.libs/hbb_common.url)
          SUBMODULE_PATH=$(git config -f .gitmodules --get submodule.libs/hbb_common.path)
          git clone $SUBMODULE_URL $SUBMODULE_PATH

      - name: 🧹 删除嵌套 Git 仓库
        if: steps.check-version.outputs.skip_build == 'false'
        run: |
          cd rustdesk
          rm -rf libs/hbb_common/.git

      - name: 🔧 修改 config.rs
        if: steps.check-version.outputs.skip_build == 'false'
        run: |
          cd rustdesk/libs/hbb_common/src
          python3 ../../../../python/reconfig.py
          
      - name: 🔧 修改 common.rs
        if: steps.check-version.outputs.skip_build == 'false'
        run: |
          cd rustdesk/src
          python3 ../../python/recommon.py
          
      - name: 🔧 修改 flutter-build.yml
        if: steps.check-version.outputs.skip_build == 'false'
        run: |
          cd rustdesk/.github/workflows
          python3 ../../../python/reflutterb.py
        env:
          remote_tag: ${{ env.remote_tag }}

      - name: 🔧 修改 flutter-ci.yml
        if: steps.check-version.outputs.skip_build == 'false'
        run: |
          cd rustdesk/.github/workflows
          python3 ../../../python/reflutterc.py

      - name: 📝 提交并推送修改
        if: steps.check-version.outputs.skip_build == 'false'
        run: |
          cd rustdesk
          DEFAULT_BRANCH=$(git remote show origin | grep 'HEAD branch' | awk '{print $NF}')
          git checkout $DEFAULT_BRANCH
          git pull origin $DEFAULT_BRANCH
          git add .
          git commit -m "rustdesk-pro-gogogo"
          git push https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/${{ github.repository }} $DEFAULT_BRANCH


      - name: ⏱️ 等待 3 分钟
        if: steps.check-version.outputs.skip_build == 'false'
        run: sleep 180

      - name: 🕵️ 等待 flutter-ci.yml 完成
        if: steps.check-version.outputs.skip_build == 'false'
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          sudo apt-get install -y gh
          gh auth setup-git

          repo="${{ github.repository }}"
          wf_path=".github/workflows/flutter-ci.yml"

          echo "🔍 查询 flutter-ci.yml 的 workflow id ..."
          wf_id=$(gh api repos/$repo/actions/workflows | jq -r ".workflows[] | select(.path == \"$wf_path\") | .id")

          if [ -z "$wf_id" ]; then
            echo "❌ 找不到 flutter-ci.yml 的 workflow"
            exit 1
          fi

          echo "⏳ 开始等待 flutter-ci.yml 执行完成..."

          while true; do
            status=$(gh api repos/$repo/actions/workflows/$wf_id/runs?branch=master\&per_page=1 | jq -r '.workflow_runs[0].status')
            echo "🔄 当前状态: $status"
            if [ "$status" == "completed" ]; then
              echo "✅ flutter-ci.yml 执行完成"
              break
            fi
            echo "🕒 等待 10 分钟后重试..."
            sleep 600
          done

      - name: 🔥 删除 master 分支
        if: steps.check-version.outputs.skip_build == 'false'
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          echo "🗑️ 准备删除 master 分支..."
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"

          git ls-remote --exit-code --heads https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/${{ github.repository }} master
          if [ $? -eq 0 ]; then
            git push https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/${{ github.repository }} --delete master
            echo "✅ 已删除 master 分支"
          else
            echo "ℹ️ master 分支不存在或已删除"
          fi

      - name: 📝📌 写入并提交 tag.md
        if: steps.check-version.outputs.skip_build == 'false'
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"

          mkdir -p temp
          echo "${{ env.remote_tag }}" > $LOCAL_TAG_FILE
          echo "✅ 已写入远程版本号 ${{ env.remote_tag }} 到 $LOCAL_TAG_FILE"

          git add $LOCAL_TAG_FILE || echo "⚠️ git add 失败（可能文件不存在）"
          git commit -m "更新本地版本号为 ${{ env.remote_tag }}" || echo "ℹ️ 没有需要提交的更改"
          git push https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/${{ github.repository }} HEAD
