name: 构建 RustDesk-Pro

on:
  workflow_dispatch: # 允许被其他 workflow 触发或手动触发

jobs:
  build-rustdesk-pro:
    runs-on: ubuntu-latest

    env:
      GH_TOKEN: ${{ secrets.PAT_TOKEN }}

    steps:
      - name: Checkout 当前仓库
        uses: actions/checkout@v4
        with:
          token: ${{ env.GH_TOKEN }}

      - name: 获取远程最新版本号
        id: get-tag
        run: |
          latest_tag=$(curl -s https://api.github.com/repos/rustdesk/rustdesk/releases/latest | jq -r .tag_name)
          echo "🌐 远程最新版本: $latest_tag"
          # 使用 GITHUB_ENV 将动态生成的变量传递给后续步骤
          echo "remote_tag=$latest_tag" >> $GITHUB_ENV

      - name: 📦 设置 Git 用户信息
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"

      - name: 📁 克隆 rustdesk 仓库及子模块
        run: git clone --recurse-submodules https://github.com/rustdesk/rustdesk.git

      - name: 🧹 移除并重新克隆 hbb_common 子模块
        run: |
          cd rustdesk
          SUBMODULE_PATH=$(git config -f .gitmodules --get submodule.libs/hbb_common.path)
          SUBMODULE_URL=$(git config -f .gitmodules --get submodule.libs/hbb_common.url)
          git submodule deinit -f $SUBMODULE_PATH
          git rm --cached $SUBMODULE_PATH
          rm -rf $SUBMODULE_PATH
          git clone $SUBMODULE_URL $SUBMODULE_PATH
          rm -rf libs/hbb_common/.git

      - name: 🔧 修改配置文件 (config.rs, common.rs, flutter)
        run: |
          # python 脚本会自动从环境中读取 remote_tag 变量
          python3 python/reconfig.py rustdesk/libs/hbb_common/src/config.rs
          python3 python/recommon.py rustdesk/src/common.rs
          python3 python/refluttera.py rustdesk/.github/workflows/flutter-ci.yml
          python3 python/redarta.py rustdesk/flutter/lib/mobile/pages/connection_page.dart
          python3 python/redartb.py rustdesk/flutter/lib/desktop/pages/desktop_home_page.dart

      - name: 📝 提交并推送修改到当前仓库
        run: |
          cd rustdesk
          TARGET_BRANCH="master"
          if ! git show-ref --verify --quiet refs/heads/$TARGET_BRANCH; then
            git checkout -b $TARGET_BRANCH
          else
            git checkout $TARGET_BRANCH
          fi
          git add .
          git commit --allow-empty -m "Build RustDesk-Pro v${{ env.remote_tag }}"
          git push https://x-access-token:${{ env.GH_TOKEN }}@github.com/${{ github.repository }} $TARGET_BRANCH

      - name: ⏱️ 等待 3 分钟让 CI 开始
        run: sleep 180

      - name: 🕵️ 等待 flutter-ci.yml 完成
        run: |
          sudo apt-get update && sudo apt-get install -y jq gh
          gh auth setup-git
          
          repo="${{ github.repository }}"
          wf_path=".github/workflows/flutter-ci.yml"
          target_branch="master"
          
          echo "🔍 查询 flutter-ci.yml 的 workflow id..."
          wf_id=$(gh api repos/$repo/actions/workflows | jq -r ".workflows[] | select(.path == \"$wf_path\") | .id")
          if [ -z "$wf_id" ]; then
            echo "❌ 找不到 flutter-ci.yml 的 workflow"
            exit 1
          fi
          
          echo "⏳ 等待 flutter-ci.yml 在分支 '$target_branch' 上执行完成..."
          timeout 7200s bash -c '
            while true; do
              run_info=$(gh api "repos/'"$repo"'/actions/workflows/'"$wf_id"'/runs?branch='"$target_branch"'&per_page=1")
              status=$(echo "$run_info" | jq -r ".workflow_runs[0].status")
              conclusion=$(echo "$run_info" | jq -r ".workflow_runs[0].conclusion")

              echo "🔄 当前状态: $status, 结果: $conclusion"
              if [ "$status" == "completed" ]; then
                if [ "$conclusion" == "success" ]; then
                  echo "✅ flutter-ci.yml 执行成功"
                  break
                else
                  echo "❌ flutter-ci.yml 执行失败 ($conclusion)"
                  exit 1
                fi
              fi
              echo "🕒 等待 5 分钟后重试..."
              sleep 300
            done
          '
      
      - name: 🚀 发布 Release
        run: |
          echo "🚀 正在将版本 ${{ env.remote_tag }} 从 pre-release 更新为正式 release..."
          gh release edit "${{ env.remote_tag }}" \
            --repo "${{ github.repository }}" \
            --prerelease=false
            
          echo "✅ 版本 ${{ env.remote_tag }} 已成功发布！"

      - name: 🔥 删除 master 分支
        run: |
          echo "🗑️ 准备删除 master 分支..."
          if git ls-remote --exit-code --heads https://x-access-token:${{ env.GH_TOKEN }}@github.com/${{ github.repository }} master; then
            git push https://x-access-token:${{ env.GH_TOKEN }}@github.com/${{ github.repository }} --delete master
            echo "✅ 已删除 master 分支"
          else
            echo "ℹ️ master 分支不存在或已删除"
          fi
